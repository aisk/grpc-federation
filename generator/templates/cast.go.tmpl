{{- define "castRepeated" }}
ret := make({{ .ResponseType }}, 0, len(from))
for _, v := range from {
	{{- if .ElemRequiredCast }}
	casted, err := s.{{ .ElemCastName }}(v)
	if err != nil {
		return nil, err
	}
	ret = append(ret, casted)
	{{- else }}
	ret = append(ret, v)
	{{- end }}
}
return ret, nil
{{- end }}

{{- define "castMessage" }}
if from == nil {
	return nil, nil
}
{{ $oneofFields := .Oneofs }}
{{- if $oneofFields }}
{{- range .Fields }}

{{- if .RequiredCast }}
{{ .ToFieldName }}, err := s.{{ .CastName }}(from.Get{{ .FromFieldName }}())
if err != nil {
	return nil, err
}
{{- else }}
{{ .ToFieldName }} := from.Get{{ .FromFieldName }}()
{{- end }}
{{- end }}

ret := &{{ .Name }}{
	{{- range .Fields }}
	{{ .ToFieldName }}: {{ .ToFieldName }},
	{{- end }}
}
{{- range .Oneofs }}
switch {
	{{ $name := .Name }}
	{{- range .Fields }}
	case from.Get{{ .FromFieldName }}() != nil:
	{{- if .RequiredCast }}
	{{ $name }}, err := s.{{ .CastName }}(from.Get{{ .FromFieldName }}())
	if err != nil {
		return nil, err
	}
	{{- else }}
	{{ $name }} := from.Get{{ .FromFieldName }}()
	{{- end }}
	ret.{{ $name }} = {{ $name }}
	{{- end }}
}
{{- end }}
return ret, nil

{{- else }}
{{- range .Fields }}

{{- if .RequiredCast }}
{{ .ToFieldName }}, err := s.{{ .CastName }}(from.Get{{ .FromFieldName }}())
if err != nil {
	return nil, err
}
{{- else }}
{{ .ToFieldName }} := from.Get{{ .FromFieldName }}()
{{- end }}

{{- end }}

return &{{ .Name }}{
	{{- range .Fields }}
	{{ .ToFieldName }}: {{ .ToFieldName }},
	{{- end }}
}, nil

{{- end }}
{{- end }}

{{- define "castOneof" }}
if from == nil {
	return nil, nil
}
{{- if .RequiredCast }}
{{ .FieldName }}, err := s.{{ .CastName }}(from)
if err != nil {
	return nil, err
}
{{- else }}
{{ .FieldName }} := from
{{- end }}
return &{{ .Name }}{ {{ .FieldName }}: {{ .FieldName }} }, nil
{{- end }}

{{- define "castEnum" }}
switch from {
	{{- range .FromValues }}
	case {{ .FromValue }}:
	return {{ .ToValue }}, nil
	{{- end }}
	{{- if .DefaultValue }}
	default:
	return {{ .DefaultValue }}, nil
	{{- end }}
}
{{- end }}
