syntax = "proto3";

package org.federation;

import "grpc/federation/federation.proto";
import "post.proto";

option go_package = "example/federation;federation";

service FederationService {
  option (grpc.federation.service) = {};
  rpc CreatePost(CreatePostRequest) returns (CreatePostResponse) {};
}

enum PostType {
  option (grpc.federation.enum).alias = "org.post.PostType";

  POST_TYPE_UNKNOWN = 0;
  POST_TYPE_A = 1;
  POST_TYPE_B = 2;
}

message CreatePostRequest {
  string title = 1;
  string content = 2;
  string user_id = 3;
  PostType type = 4;
}

message CreatePostResponse {
  option (grpc.federation.message) = {
    def [
      {
        name: "cp"
        message {
          name: "CreatePost"
          args: [
            { name: "title", by: "$.title" },
            { name: "content", by: "$.content" },
            { name: "user_id", by: "$.user_id" },
            { name: "type" by: "$.type" }
          ]
        }
      },
      {
        name: "res"
        call {
          method: "org.post.PostService/CreatePost"
          request { field: "post" by: "cp" }
        }
      },
      { name: "p" by: "res.post" }
    ]
  };
  Post post = 1 [(grpc.federation.field).by = "p"];
}

message CreatePost {
  option (grpc.federation.message).alias = "org.post.CreatePost";

  string title = 1 [(grpc.federation.field).by = "$.title"];
  string content = 2 [(grpc.federation.field).by = "$.content"];
  string user_id = 3 [(grpc.federation.field).by = "$.user_id"];
  PostType type = 4 [(grpc.federation.field).by = "$.type"];
  PostType post_type = 5 [(grpc.federation.field).by = "org.federation.PostType.POST_TYPE_A"];
}

message Post {
  option (grpc.federation.message).alias = "org.post.Post";

  string id = 1;
  string title = 2;
  string content = 3;
  string user_id = 4;
}
